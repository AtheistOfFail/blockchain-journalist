$(document).ready(function(){
	new Clipboard('.clipboard_object', {
    text: function(trigger) {
        return handleGeneration();
    }
	});

	var fields = null;
	var titles = null;
	var article = null;

	var active_targets = [];
	$.getJSON(chrome.extension.getURL('/configs/data.json'), function(data) {
		fields = data["fields"];
		titles = data["titles"];
		article = data["article"];
		
		$("#buttons").html();
		$.each(fields, function(index, value){
			for (target in value) {
				var raw_target = target
				var target = target.replace(" ", "_");
				$("#buttons").append('<a id="'+target+'" type="button" data-target="input_'+target+'" class="btn btn-flat">'+target+'</a>')
				$("#inputs").append("<div style='display:none' class='text-center' id='"+raw_target+"'><input id='input_"+target+"' type='text' placeholder='"+value[raw_target]+"'></input><a id='remove_"+target+"' data-target='"+target+"' type='button' class='btn btn-flat' style='width:50%'>Remove "+target+"</a></div>");
				$("#remove_"+target).click(handleInputRemoval);
				$("#"+target).click(handleButtonClick);
			}
		});
	});

	function handleButtonClick(evt){
		$(this).hide();
		$("#"+$(this).data("target")).parent().show();
		$("#"+$(this).data("target")).parent().addClass("field_active");
		updateUI();
	}

	function handleInputRemoval(evt){
		$(this).parent().removeClass("field_active");
		$(this).parent().hide();
		$("#"+$(this).data("target")).show();
		updateUI();
	}

	function handleGeneration(){
		var target = "";

		var IDs = [];
		$(".field_active").each(function(){ IDs.push(this.id); });

		var best_title = getBestTitle(IDs);
		target += "Title: " + best_title + "\n\n";
		
		var article = buildArticle(IDs);
		target += "Article: " + article;

		return target;
	}

	function getBestTitle(IDs){
		var largest_matching = 0;
		var largest_match = null;

		var current_count = IDs.length;

		for (var i = 0; i < titles.length; i++) {
			if (current_count == titles[i]["reqs"] && equals(IDs, titles[i]["reqs"]))
			{
				largest_matching = current_count;
				largest_match = titles[i]["title"];
			}
			else if (contains(IDs, titles[i]["reqs"]) && titles[i]["reqs"].length > largest_matching)
			{
				largest_matching = titles[i]["reqs"].length;
				largest_match = titles[i]["title"];
			}
		}

		return trimInputs(IDs, largest_match);
	}

	function buildArticle(IDs){
		var final_article = ""

		var current_line = 0;
		var current_count = IDs.length;
		var largest_matching = 0;
		var largest_match = "";

		for (var i = 0; i < article.length; i++) {
			if (article[i]["position"] == current_line){
				if (current_count == article[i]["reqs"] && equals(IDs, article[i]["reqs"]))
				{
					largest_matching = current_count;
					largest_match = article[i]["text"];
				}
				else if (contains(IDs, article[i]["reqs"]) && article[i]["reqs"].length > largest_matching)
				{
					largest_matching = article[i]["reqs"].length;
					largest_match = article[i]["text"];
				}
				else if(article[i]["reqs"].length == 0)
				{
					largest_matching = article[i]["reqs"].length;
					largest_match = article[i]["text"];
				}
			}
			else {
				//Redo current line and move the current line upwards. Merge the current matching and largest_match lines.
				final_article += largest_match;
				largest_matching = 0;
				largest_match =""

				current_line++;
				i--;
			}
		}

		//Merge the final line (just in case);
		final_article += largest_match;

		return trimInputs(IDs, final_article);
	}

	function trimInputs(IDs, target_string){
		for (var i = 0; i < IDs.length; i++) {
			target_string = target_string.split("#{"+IDs[i]+"}").join($("#input_"+IDs[i].replace(" ","_")).val());
		}
		return target_string;
	}

	function updateUI(){
		var IDs = [];
		$(".field_active").each(function(){ IDs.push(this.id); });

		if (verifySufficient(IDs)){
			$("#output").show();
		}
		else {
			$("#output").hide();
		}
	}

	function verifySufficient(currentIDs){
		var reqs = false;
		for (var i = 0; i < titles.length; i++) {
   		if (contains(currentIDs, titles[i]["reqs"])){
   			reqs = true;
   		}
		}

		if (!reqs){
			return reqs;
		}

		for (var i = 0; i < article.length; i++) {
   		if (contains(currentIDs, article[i]["reqs"])){
   			reqs = true;
   		}
		}

		return reqs;
	}

	function contains(haystack, needle){
  	for(var i = 0; i < needle.length; i++){
    	if(haystack.indexOf(needle[i]) === -1)
      	 return false;
  	}
  	return true;
	}

	function equals(first, second){
		return $(first).not(second).length === 0 && $(first).not(second).length === 0
	}
});